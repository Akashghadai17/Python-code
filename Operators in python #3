#Python divides the operators in the following groups:

#Arithmetic operators
#Assignment operators
#Comparison operators
#Logical operators
#Identity operators
#Membership operators
#Bitwise operators

#1)Arithmetic operators(Arithmetic operators are used with numeric values-
#to perform common mathematical operations):
#a store 10 and b store 20 print function print result of operations
a=10
b=20
print(a+b)
print(a-b)
print(a*b)
print(a/b)
#add complex number
a=4+6j
b=7+5j
print(a+b) # And allso it return complex number

#2)Assignment operators(Assignment operators are used to assign values to variables):
# = 	x = 5	x = 5	
# +=	x += 3	x = x + 3	
# -=	x -= 3	x = x - 3	
# *=	x *= 3	x = x * 3	
# /=	x /= 3	x = x / 3	
# %=	x %= 3	x = x % 3	
# //=	x //= 3	x = x // 3	
# **=	x **= 3	x = x ** 3	
# &=	x &= 3	x = x & 3	
# |=	x |= 3	x = x | 3	
# ^=	x ^= 3	x = x ^ 3	
# >>=	x >>= 3	x = x >> 3	
# <<=	x <<= 3	x = x << 3

#3(Python Comparison Operators):
# ==	Equal	x == y	
# !=	Not equal	x != y	
# >	Greater than	x > y	
# <	Less than	x < y	
# >=	Greater than or equal to	x >= y	
# <=	Less than or equal to	x <= y

#4)Python Logical Operators(Logical operators are used to combine conditional statements):
# and 	Returns True if both statements are true	x < 5 and  x < 10	
# or	Returns True if one of the statements is true	x < 5 or x < 4	
# not	Reverse the result, returns False if the result is true	not(x < 5 and x < 10)

#5Python Identity Operators(Identity operators are used to compare the objects, not if they-
#are equal, but if they are actually the same object, with the same memory location):
# is 	Returns True if both variables are the same object	x is y-	
# is not	Returns True if both variables are not the same object	x is not y

#6Python Membership Operators(Membership operators are used to test if a sequence is presented-
# in an object):
# in 	Returns True if a sequence with the specified value is present in the object	x in y	
# not in	Returns True if a sequence with the specified value is not present in the object

#7Python Bitwise Operators(Bitwise operators are used to compare (binary) numbers):
# & 	AND	Sets each bit to 1 if both bits are 1	x & y	
# |	OR	Sets each bit to 1 if one of two bits is 1	x | y	
# ^	XOR	Sets each bit to 1 if only one of two bits is 1	x ^ y	
# ~	NOT	Inverts all the bits	~x	
# <<	Zero fill left shift	Shift left by pushing zeros in from the right and let the leftmost-
# bits fall off	x << 2	
# >>	Signed right shift	Shift right by pushing copies of the leftmost bit in from the left,-
#and let the rightmost bits fall off	x >> 2#



